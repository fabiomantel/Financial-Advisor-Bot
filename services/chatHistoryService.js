const logger = require('../utils/logger')
const StorageFactory = require('./storage')

class ChatHistoryService {
  constructor(storageProvider) {
    this.storageProvider = storageProvider
    this.maxHistoryLength = 20
    logger.info(`ChatHistoryService initialized with storage type: ${storageProvider.constructor.name}`)
  }

  async getUserHistory(userId) {
    try {
      const history = await this.storageProvider.get(`chat_history:${userId}`)
      const parsedHistory = history ? JSON.parse(history) : []
      
      // Truncate history if it exceeds the limit
      const truncatedHistory = this.truncateHistory(parsedHistory)
      
      // If truncation occurred, save the truncated version back to storage
      if (truncatedHistory.length !== parsedHistory.length) {
        await this.saveUserHistory(userId, truncatedHistory)
      }
      
      return truncatedHistory
    } catch (err) {
      logger.error(`Failed to get user history for ${userId}: ${err.message}`)
      return []
    }
  }

  async saveUserHistory(userId, history) {
    try {
      await this.storageProvider.set(`chat_history:${userId}`, JSON.stringify(history), { ttl: 86400 }) // 24 hours
      logger.debug(`Saved user history for ${userId}: ${history.length} messages`)
    } catch (err) {
      logger.error(`Failed to save user history for ${userId}: ${err.message}`)
    }
  }

  addUserMessage(history, message) {
    // Ensure message is a string
    const messageStr = String(message || '')
    logger.info(`Adding user message to history: "${messageStr.substring(0, 50)}${messageStr.length > 50 ? '...' : ''}"`)
    const newHistory = [...history, { role: 'user', content: messageStr }]
    logger.info(`History after adding user message: ${newHistory.length} messages`)
    return newHistory
  }

  addAssistantMessage(history, message) {
    // Ensure message is a string
    const messageStr = String(message || '')
    logger.info(`Adding assistant message to history: "${messageStr.substring(0, 50)}${messageStr.length > 50 ? '...' : ''}"`)
    const newHistory = [...history, { role: 'assistant', content: messageStr }]
    logger.info(`History after adding assistant message: ${newHistory.length} messages`)
    return newHistory
  }

  async addUserMessageAsync(history, message, userId) {
    const startTime = Date.now()
    const messageStr = String(message || '')
    logger.info(`üìù [Async] Adding user message to history: "${messageStr.substring(0, 50)}${messageStr.length > 50 ? '...' : ''}"`)
    
    // Add to memory immediately
    const newHistory = [...history, { role: 'user', content: messageStr }]
    
    // Save to Redis asynchronously (don't wait)
    setImmediate(async () => {
      try {
        const saveStart = Date.now()
        await this.saveUserHistory(userId, newHistory)
        const saveDuration = Date.now() - saveStart
        logger.debug(`üíæ [Async] Redis save completed in ${saveDuration}ms`)
      } catch (saveErr) {
        logger.error(`‚ùå [Async] Redis save failed: ${saveErr.message}`)
      }
    })
    
    const totalDuration = Date.now() - startTime
    logger.info(`‚úÖ [Async] History updated in ${totalDuration}ms`)
    return newHistory
  }

  truncateHistory(history, maxLength = this.maxHistoryLength) {
    if (history.length <= maxLength) return history
    const truncated = history.slice(-maxLength)
    logger.info(`Truncated history from ${history.length} to ${truncated.length} messages`)
    return truncated
  }

  async prepareMessagesForGpt(userId, currentMessage) {
    const startTime = Date.now()
    logger.info(`üìù [GPT] Preparing messages for user: ${userId}`)
    
    try {
      // Get user history
      const history = await this.getUserHistory(userId)
      logger.debug(`üìä [GPT] Retrieved ${history.length} history messages`)
      
      // Add current message
      const updatedHistory = this.addUserMessage(history, currentMessage)
      const truncatedHistory = this.truncateHistory(updatedHistory)
      
      // Prepare system message
      const systemMessage = {
        role: 'system',
        content: '◊ê◊™◊î ◊§◊ë◊ô◊ï ◊û◊†◊ò◊ú ‚Äì ◊ê◊ì◊®◊ô◊õ◊ú◊ï◊™ ◊§◊ô◊†◊†◊°◊ô◊™ ◊ú◊¶◊û◊ô◊ó◊î. ◊ô◊ï◊¢◊• ◊§◊ô◊†◊†◊°◊ô ◊û◊†◊ï◊°◊î, ◊û◊ï◊û◊ó◊î ◊ë◊î◊©◊ß◊¢◊ï◊™, ◊û◊ô◊°◊ï◊ô ◊ë◊ô◊©◊®◊ê◊ú ◊ï◊†◊ô◊î◊ï◊ú ◊î◊ï◊ü ◊û◊©◊§◊ó◊™◊ô. ◊¢◊†◊î ◊ë◊¢◊ë◊®◊ô◊™, ◊ë◊í◊ï◊ë◊î ◊î◊¢◊ô◊†◊ô◊ô◊ù, ◊¢◊ù ◊ì◊í◊© ◊¢◊ú ◊¢◊®◊ö ◊§◊®◊ß◊ò◊ô. ◊î◊©◊™◊û◊© ◊ë◊¢◊ô◊¶◊ï◊ë ◊ò◊ß◊°◊ò WhatsApp ◊ë◊ú◊ë◊ì:\n\n- ◊õ◊ï◊™◊®◊ï◊™ ◊®◊ê◊©◊ô◊ï◊™: *◊õ◊ï◊™◊®◊™ ◊®◊ê◊©◊ô◊™*\n- ◊õ◊ï◊™◊®◊ï◊™ ◊û◊©◊†◊ô◊ï◊™: _◊õ◊ï◊™◊®◊™ ◊û◊©◊†◊ô◊™_\n- ◊®◊©◊ô◊û◊ï◊™: * ◊§◊®◊ô◊ò ◊®◊ê◊©◊ï◊ü\n- ◊®◊©◊ô◊û◊ï◊™: - ◊§◊®◊ô◊ò ◊©◊†◊ô\n- ◊î◊ì◊í◊©◊ï◊™: _◊ò◊ß◊°◊ò ◊û◊ï◊ì◊í◊©_\n- ◊¶◊ô◊ò◊ï◊ò◊ô◊ù: > ◊ò◊ß◊°◊ò ◊ó◊©◊ï◊ë\n- ◊ß◊ï◊ì: `◊û◊ï◊†◊ó ◊ò◊õ◊†◊ô`\n- ◊ß◊ï ◊ó◊ï◊¶◊î: ~◊ò◊ß◊°◊ò ◊û◊ô◊ï◊©◊ü~\n\n◊ó◊©◊ï◊ë: ◊ê◊ú ◊™◊©◊™◊û◊© ◊ë-### ◊ê◊ï markdown ◊ê◊ó◊®. ◊î◊©◊™◊û◊© ◊®◊ß ◊ë◊¢◊ô◊¶◊ï◊ë WhatsApp. ◊ï◊ï◊ì◊ê ◊©◊î◊õ◊ï◊õ◊ë◊ô◊ï◊™ ◊ï◊î◊ß◊ï◊ï◊ô◊ù ◊î◊™◊ó◊™◊ï◊†◊ô◊ù ◊û◊ï◊§◊ô◊¢◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊õ◊û◊ï ◊©◊¶◊®◊ô◊ö: *◊ò◊ß◊°◊ò* ◊ï_◊ò◊ß◊°◊ò_. ◊î◊©◊™◊û◊© ◊ë◊®◊ï◊ï◊ó◊ô◊ù ◊†◊õ◊ï◊†◊ô◊ù ◊ë◊ô◊ü ◊î◊õ◊ï◊õ◊ë◊ô◊ï◊™ ◊ú◊ò◊ß◊°◊ò.\n\n◊ê◊ú ◊™◊©◊ê◊ú ◊©◊ê◊ú◊ï◊™ ◊ë◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ö. ◊™◊ü ◊û◊ô◊ì◊¢ ◊ô◊©◊ô◊® ◊ï◊§◊®◊ß◊ò◊ô ◊ú◊ú◊ê ◊©◊ê◊ú◊ï◊™.'
      }
      
      const messages = [systemMessage, ...truncatedHistory]
      const duration = Date.now() - startTime
      logger.info(`‚úÖ [GPT] Prepared ${messages.length} messages in ${duration}ms`)
      
      return messages
    } catch (err) {
      logger.error(`‚ùå [GPT] Failed to prepare messages: ${err.message}`)
      throw err
    }
  }

  async healthCheck() {
    try {
      await this.storageProvider.healthCheck()
      return true
    } catch (err) {
      logger.error(`ChatHistoryService health check failed: ${err.message}`)
      return false
    }
  }
}

module.exports = ChatHistoryService

// Named export for direct use in streamingController
const defaultProvider = {
  get: async () => '[]',
  set: async () => {},
  healthCheck: async () => true
};
const defaultService = new ChatHistoryService(defaultProvider);
module.exports.prepareMessagesForGpt = defaultService.prepareMessagesForGpt.bind(defaultService);

